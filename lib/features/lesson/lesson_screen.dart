import 'package:flutter/material.dart';
import 'package:platform_for_learning/features/lesson/domain/lesson.dart';
import 'package:platform_for_learning/features/lesson/presentation/widgets/quiz_widget.dart';

class MyScreen extends StatelessWidget {
  MyScreen({super.key});

  final lessonOne = Lesson(
    title: 'Вступление',
    content: [
      Quiz(
        indexRightAnswer: 1,
        title: 'Какой цвет у фона?',
        variants: ['Черный', 'Белый', 'Красный', 'желтый'],
      ),
      TextContent(
        text:
            'Наш современный мир с каждым днем все более и более обзаводится новыми устройствами. Смартфоны, компьютеры, интернет становятся неотъемлемой частью человека. Мы в каждом дне используем свой телефон, заходя в интернет, запуская различные приложения, но редко кто из пользователей задумывается, что приложения или браузер написали программисты. С каждым днем появляются новые приложения, игры, сайты и для это нужны программисты.В нашем курсе мы будем учиться становиться программистами изучая язык Dart и Flutter',
      ),
      TextContent(
        title: 'Что такое Dart/Flutter, нужно ли мне это?',
        text:
            'В современном мире есть разные платформы, к примеру две такие платформы как IOS и Android. Каждая платформа была написана на языке программирования и у каждой платформы есть, свой собственный язык на котором она была написана. К примеру, основой для устройств Android платформы, является язык Java, а основой для устройств IOS, является язык Objective-C\nВ таком случае, чтобы поддерживать и создавать программное обеспечение для Android и IOS, нужно знать два языка одновременно. В принципе можно выучить два языка, но платформ гораздо больше чем просто IOS и Android, есть еще Windows, Linux и т. д... Как тогда быть, если я хочу писать свое приложение на все устройства? Для этого мне нужно знать все языки? Да, так и есть, но одному человеку трудно знать все языки. По этой причине компании и нанимают несколько программистов потому, что платформ много и хочется распространить свое коммерческое приложение на все платформы. Минус заключается в том, что каждый программист имеет свою кодовую базу, у каждого свои ошибки и свои недочеты, связанные с его платформой. Из-за этого в команде, в какой-то момент, может настать хаос. В любом случае, есть хорошие компании, которые во всем этом могут держать порядок. Как предотвратить весь этот хаос? - главный вопрос, который хочется задать и в этот момент вступает Dart/Flutter.\n\nЧто такое Dart/Flutter?\nDart - это один из языков программирования, на нем написана программная платформа Flutter.\n\nЗнания языка Dart и программной платформы(фреймворка) Flutter, даст возможность писать один код и использовать его для разных платформ, таких как Android, IOS, Web, Windows, macOS, Linux.\nFlutter решает проблему с множеством кодовых баз. На нем можно написать приложение используя единую кодовую базу и это дает большой плюс этому фреймворку.\nЗвучит очень красиво и благодаря этому Flutter набирает популярность.\n\nКонечно, у Flutter есть и свои минусы, такие как:\n  · Порог вхождение выше, чем у всех остальных языков\n · Язык молодой и только начинает развиваться\n  · В итоге размер приложений больше, чем в нативной разработке, но не сильно\n\nЕсли вас заинтересовало, то предлагаем идти дальше.',
      ),
      TextContent(
        title: 'На что нацелен курс.',
        text:
            'В вашей голове может сложиться, что этот курс даст 100% гарантию на ваше будущее трудоустройство в сфере программирования, к сожалению, это не совсем так, мы не ставим таких целей. Но зачем тогда этот курс?! Может не стоит его проходить? Зачем если я после него не трудоустроюсь?! Думаю, не стоит унывать и делать прежде временные выводы опуская руки.\n\nДавайте разберемся!\n\nПрежде, хотелось бы подметить, что каждый из вас пришел сюда со своими целями. Кто-то просто хочет сменить работу, а кто-то из молодых может впервые хочет найти свою первую профессию, а может быть вы вообще не ставите целей на будущую работу, а просто хотите расширить свой диапазон знаний.\n\nВопрос к вам. С какой целью вы пришли сюда?\n\nМы уважаем ваши цели и желания и очень рады, если вы стремитесь работать в сфере программирования, но хотелось бы, прежде чем начать, преподнести вам, чего мы хотим и какие цели ставит наша команда.\n\nНаша цель.\nНаша цель и задача состоит в том, чтобы дать человеку первое основание программирования или укрепить и расширить существующий фундамент знаний.\n\nМы не можем трудоустроить вас, но мы можем постараться всеми силами сделать так, чтобы вам было легче найти будущую работу и трудоустроится.\n\nЕсли вас это интересует, то идем дальше)',
      ),
      TextContent(
        title: 'Будущие планы.',
        text:
            'Нам предстоит пройти 3 важных блока\n\nБлоки:\n  · Основы Dart\n · Основы Flutter\n  · Первый проект MVP\n\n\nОсновы Dart.\n\nDart - это самый важный пункт из всех трех описанных выше.\n\n«Почему самый важный?» —спросите вы.\n\nПричина его важности заключается в том, что язык Dart является основанием для всех остальных пунктов вышеперечисленных.\n\nПростой принцип основания.\nПредставьте, что вы решили построить дом и убрали из чертежа фундамент.\nДаже если вы и приступите к стройке, то хотелось бы посмотреть на вас со стороны, как вы будете все реализовывать. Я думаю, вы понимаете, что это практически невозможно, а если и попытаться, то все закончится неудачей.\n\nЕсли проводить параллель с языком Dart, то на практике, приходилось видеть, как ребята пытались учить язык программирования, относясь небрежно к основам Dart, что привело к будущим неудачам.\nПриведу практический пример. Помню, когда мы перешли к пункту основ Flutter, ребятам стало очень тяжело, они не могли понять Flutter, для них он показался чем-то новым, появилось много вопросов, что и заглушило желание дальнейшего обучения. К общему сведенью, если бы ребята знали основы языка Dart и бережно к ним относились, то это решило бы большую часть вопросов и они бы с радостью, приступили к изучению фреймворка.\n\nПодведя итог, хотелось бы отметить, что хорошее основания языка Dart, это залог хорошего успешного будущего. Чем больше вы углубляетесь в глубины, тем легче вам будет вам в будущем. На хорошем фундаменте можно построить красивое здание, ровно и то, что на хорошем знании Dart, в будущем можно построить красивое приложение.\n\nВ этом пункте мы ознакомимся с вами:\n · Восприятие кода\n · Что такое ООП и из чего будет состоять наш код\n  · Знакомство с VS Code, DartPad\n · Встроенные типы данных\n  · Инициализация переменных\n  · Операторы\n · Функции\n · Коллекции\n · Условия\n · Циклы\n · Null safety\n · Классы и объекты\n  · Перечисление(enum)\n  · Дженерики (Шаблоны)\n · Основные библиотеки/Сторонние библиотеки\n  · Исключения\n  · Расширение классов\n  · Асинхронность\n · Многопоточность\n\nОсновы Dart — это первый пункт, в который мы постараемся вложить все усилия и к этому пункту, мы будем возвращаться на протяжении всего обучения.\n\n\nОсновы Flutter.\n\nFlutter - это программная платформа, написанная на языке Dart. Она позволит взаимодействовать с пользователем, на устройствах Android, IOS, Web, Windows, macOS, Linux.\n\nВ этом пункте мы впервые создадим проект Flutter, и запустим его у себя на реальном/виртуальном устройстве.\n\nFlutter оснащен большой функциональностью и с этой функциональность мы будем знакомиться на протяжении этого пункта.\n\nВ этом пункте мы ознакомимся с вами:\n · Что такое виджет.\n · Обзор встроенных виджетов.\n  · Основные функция и виджеты(фундамент)\n · Создание первого собственного виджета\n · Создание первого экрана с названием моего приложения\n  · Реализация приложения счетчик\n · Жизненный цикл StatefulWidget и StatefulWidget\n  · Что такое const и зачем он нужен\n  · Что такое контекст\n  · Что такое DevTools (дерево виджетов)\n  · Подключение сторонних виджетов\n  · State management "Provider", отделение логики от верстки.\n\nПрежде чем приступить к Flutter, нужно пройти основы Dart.\n\n\nПервый проект MVP\n\nЧто такое MVP?\nMVP имеет два значения в программировании. В нашем случае MVP следующие значение.\n\nMVP расшифровывается как Minimum Viable Product — минимально жизнеспособный продукт. Простыми словами: это неидеальный продукт, который всё же выполняет основную функцию и уже представлен пользователям.\n\nВ этом пункте, на основе полученных знаний каждый будет создавать свой первый MVP проект. Список приложений будет предоставлен ниже. Вы также можете, предложить свою идею приложения и попытаться написать свой первый MVP.',
      ),
    ],
  );

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 150, vertical: 40),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              lessonOne.title,
              style: const TextStyle(fontSize: 30, fontWeight: FontWeight.bold),
            ),
            ...lessonOne.content.map(
              (content) {
                bool activeTitle = content.title != '';
                if (content is TextContent) {
                  return Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      activeTitle
                          ? Text(
                              content.title,
                              style: TextStyle(
                                fontSize: 22,
                                fontStyle: FontStyle.italic,
                                fontWeight: FontWeight.bold,
                                color: Colors.red[900],
                              ),
                            )
                          : const SizedBox(),
                      const SizedBox(
                        height: 8,
                      ),
                      Text(
                        content.text,
                        style: const TextStyle(
                          fontSize: 18,
                        ),
                      ),
                      const SizedBox(
                        height: 20,
                      )
                    ],
                  );
                } else if (content is Quiz) {
                  return QuizWidget(quiz: content);
                } else {
                  return ErrorWidget('exception');
                }
              },
            ),
            // QuizWidget(quiz: quiz),
          ],
        ),
      ),
    );
  }
}
